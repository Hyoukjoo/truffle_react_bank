{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\judam\\\\Documents\\\\HJ\\\\dev\\\\truffle_react\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\judam\\\\Documents\\\\HJ\\\\dev\\\\truffle_react\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\n\nvar getWeb3 = function getWeb3() {\n  return new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var provider, web3;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Modern dapp browsers...\n              // if (window.ethereum) {\n              //   const web3 = new Web3(window.ethereum);\n              //   try {\n              //     // Request account access if needed\n              //     await window.ethereum.enable();\n              //     console.log(\"window ethereum\")\n              //     // Acccounts now exposed\n              //     resolve(web3);\n              //   } catch (error) {\n              //     reject(error);\n              //   }\n              // }\n              // // Legacy dapp browsers...\n              // else if (window.web3) {\n              //   // Use Mist/MetaMask's provider.\n              //   const web3 = window.web3;\n              //   console.log(\"Injected web3 detected.\");\n              //   resolve(web3);\n              // }\n              // Fallback to localhost; use dev console port by default...\n              // else {\n              provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n              web3 = new Web3(provider);\n              console.log(\"No web3 instance injected, using Local web3.\");\n              resolve(web3); // }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    })));\n  });\n};\n\nexport default getWeb3;","map":{"version":3,"sources":["C:\\Users\\judam\\Documents\\HJ\\dev\\truffle_react\\client\\src\\utils\\getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","provider","providers","HttpProvider","web3","console","log"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SACd,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB;AAAA;AAAA;AAAA;AAAA,6BAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,cAAAA,QAvBsB,GAuBX,IAAIP,IAAI,CAACQ,SAAL,CAAeC,YAAnB,CACf,uBADe,CAvBW;AA0BtBC,cAAAA,IA1BsB,GA0Bf,IAAIV,IAAJ,CAASO,QAAT,CA1Be;AA2B5BI,cAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAT,cAAAA,OAAO,CAACO,IAAD,CAAP,CA5B4B,CA6B9B;;AA7B8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;AA+BD,GAjCD,CADc;AAAA,CAAhB;;AAoCA,eAAeT,OAAf","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      // if (window.ethereum) {\n      //   const web3 = new Web3(window.ethereum);\n      //   try {\n      //     // Request account access if needed\n      //     await window.ethereum.enable();\n      //     console.log(\"window ethereum\")\n      //     // Acccounts now exposed\n      //     resolve(web3);\n      //   } catch (error) {\n      //     reject(error);\n      //   }\n      // }\n      // // Legacy dapp browsers...\n      // else if (window.web3) {\n      //   // Use Mist/MetaMask's provider.\n      //   const web3 = window.web3;\n      //   console.log(\"Injected web3 detected.\");\n      //   resolve(web3);\n      // }\n      // Fallback to localhost; use dev console port by default...\n      // else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      // }\n    });\n  });\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}