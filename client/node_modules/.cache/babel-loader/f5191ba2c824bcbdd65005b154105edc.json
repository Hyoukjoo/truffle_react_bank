{"ast":null,"code":"import _regeneratorRuntime from \"c:\\\\Users\\\\judam\\\\Documents\\\\HJ\\\\dev\\\\truffle_react\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"c:\\\\Users\\\\judam\\\\Documents\\\\HJ\\\\dev\\\\truffle_react\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"c:\\\\Users\\\\judam\\\\Documents\\\\HJ\\\\dev\\\\truffle_react\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"c:\\\\Users\\\\judam\\\\Documents\\\\HJ\\\\dev\\\\truffle_react\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"c:\\\\Users\\\\judam\\\\Documents\\\\HJ\\\\dev\\\\truffle_react\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"c:\\\\Users\\\\judam\\\\Documents\\\\HJ\\\\dev\\\\truffle_react\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"c:\\\\Users\\\\judam\\\\Documents\\\\HJ\\\\dev\\\\truffle_react\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"c:\\\\Users\\\\judam\\\\Documents\\\\HJ\\\\dev\\\\truffle_react\\\\client\\\\src\\\\component\\\\Submit.js\";\nimport React, { Component } from 'react';\nimport { withRouter, Redirect } from 'react-router-dom';\nimport { USERS, insertTransaction } from '../DB/DB';\nimport '../css/Submit.css';\n\nvar Submit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Submit, _Component);\n\n  function Submit() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Submit);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Submit)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      contract: _this.props.info.contract,\n      bankAccount: _this.props.info.accounts[0],\n      userAddress: _this.props.info.userAddress,\n      amount: 0,\n      charge: 0,\n      date: ''\n    };\n\n    _this.componentWillMount = function () {\n      var amount = 0;\n      var purpose = _this.props.match.params.purpose;\n\n      if (purpose === 'deposit') {\n        amount = parseInt(localStorage.getItem('deposit_amount'), 10);\n      } else if (purpose === 'withdraw') {\n        amount = parseInt(localStorage.getItem('withdraw_amount'), 10);\n      } else if (purpose === 'remit') {\n        amount = parseInt(localStorage.getItem('remit_amount'), 10);\n      }\n\n      _this.setState({\n        amount: amount\n      });\n    };\n\n    _this._submit =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$state, bankAccount, amount, contract, userAddress, charge, purpose, receiverName, receiverAddress, userName, date, balance, transaction;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = _this.state, bankAccount = _this$state.bankAccount, amount = _this$state.amount, contract = _this$state.contract, userAddress = _this$state.userAddress, charge = _this$state.charge;\n              purpose = _this.props.match.params.purpose;\n              receiverName = localStorage.getItem('receiverName');\n              receiverAddress = localStorage.getItem('receiverAddress');\n              userName = USERS.get(userAddress).userName;\n\n              if (!isNaN(amount)) {\n                _context.next = 9;\n                break;\n              }\n\n              console.log(\"숫자만 입력할 수 있습니다.\");\n              _context.next = 48;\n              break;\n\n            case 9:\n              if (!(amount === 0)) {\n                _context.next = 13;\n                break;\n              }\n\n              console.log('금액을 입력하세요');\n              _context.next = 48;\n              break;\n\n            case 13:\n              if (!(purpose !== '')) {\n                _context.next = 48;\n                break;\n              }\n\n              _context.prev = 14;\n              _context.t0 = purpose;\n              _context.next = _context.t0 === 'deposit' ? 18 : _context.t0 === 'withdraw' ? 22 : _context.t0 === 'remit' ? 26 : 30;\n              break;\n\n            case 18:\n              _context.next = 20;\n              return contract.deposit(amount, {\n                from: bankAccount\n              });\n\n            case 20:\n              purpose = '입금';\n              return _context.abrupt(\"break\", 31);\n\n            case 22:\n              _context.next = 24;\n              return contract.withdraw(amount, {\n                from: bankAccount\n              });\n\n            case 24:\n              purpose = '출금';\n              return _context.abrupt(\"break\", 31);\n\n            case 26:\n              _context.next = 28;\n              return contract.remit(amount, receiverAddress, {\n                from: bankAccount\n              });\n\n            case 28:\n              purpose = '송금';\n              return _context.abrupt(\"break\", 31);\n\n            case 30:\n              return _context.abrupt(\"break\", 31);\n\n            case 31:\n              date = _this._getDate(); //Set balance in state\n\n              _context.next = 34;\n              return contract.getBalance(userAddress, {\n                from: bankAccount\n              });\n\n            case 34:\n              balance = _context.sent;\n              transaction = _this._makeTransaction(purpose, userName, date, amount, charge, balance.words[0], receiverName, receiverAddress); //Insert the transaction in DB\n\n              insertTransaction(userAddress, transaction);\n              if (purpose === '송금') insertTransaction(receiverAddress, transaction);\n              USERS.get(userAddress).balance = balance.words[0]; //Set amount, balance, date in localStorage\n\n              localStorage.setItem('amount', amount);\n              localStorage.setItem('balance', balance);\n              localStorage.setItem('date', date);\n\n              _this.props.history.push(\"/statement/\".concat(_this.props.match.params.purpose));\n\n              _context.next = 48;\n              break;\n\n            case 45:\n              _context.prev = 45;\n              _context.t1 = _context[\"catch\"](14);\n              console.log(_context.t1);\n\n            case 48:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[14, 45]]);\n    }));\n\n    _this._getDate = function () {\n      var DATE = new Date();\n      var year = DATE.getFullYear();\n      var month = (\"0\" + (DATE.getMonth() + 1)).slice(-2);\n      var day = (\"0\" + DATE.getDate()).slice(-2);\n      var hours = (\"0\" + DATE.getHours()).slice(-2);\n      var minutes = (\"0\" + DATE.getMinutes()).slice(-2);\n      var seconds = (\"0\" + DATE.getSeconds()).slice(-2);\n      var date = \"\".concat(year, \".\").concat(month, \".\").concat(day, \" \").concat(hours, \":\").concat(minutes, \":\").concat(seconds);\n\n      _this.setState({\n        date: date\n      });\n\n      return date;\n    };\n\n    _this._makeTransaction = function (purpose, userName, date, amount, charge, balance, receiverName, receiverAddress) {\n      var transaction = {\n        purpose: purpose,\n        userName: userName,\n        date: date,\n        amount: amount,\n        charge: charge,\n        balance: balance,\n        receiverName: receiverName,\n        receiverAddress: receiverAddress\n      };\n      return transaction;\n    };\n\n    _this._checkPurpose = function () {\n      var receiverName = localStorage.getItem('receiverName');\n      var purpose = _this.props.match.params.purpose;\n\n      switch (purpose) {\n        case 'deposit':\n          return \"입금할 금액이 맞습니까 ?\";\n\n        case 'withdraw':\n          return \"출금할 금액이 맞습니까 ?\";\n\n        case 'remit':\n          return \"\".concat(receiverName, \"\\uB2D8\\uAED8 \\uC1A1\\uAE08\\uD560 \\uAE08\\uC561\\uC774 \\uB9DE\\uC2B5\\uB2C8\\uAE4C ?\");\n\n        default:\n          break;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Submit, [{\n    key: \"render\",\n    value: function render() {\n      var logout = this.props.logout;\n      var _checkPurpose = this._checkPurpose,\n          _submit = this._submit;\n      var inThousandsAmount = this.state.amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n      if (localStorage.getItem('isLogin') !== 'true') {\n        console.log('고객 정보가 없습니다.');\n        return React.createElement(Redirect, {\n          to: \"/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"checkAmount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, _checkPurpose()), React.createElement(\"div\", {\n        style: {\n          marginTop: \"30px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"amount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"\\uFFE6 \", inThousandsAmount)), React.createElement(\"div\", {\n        className: \"submitDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"submitButton confirmButton\",\n        onClick: _submit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"\\uD655 \\uC778\")), React.createElement(\"div\", {\n        className: \"submitButton cancelButton\",\n        onClick: logout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"\\uCDE8 \\uC18C\")))));\n    }\n  }]);\n\n  return Submit;\n}(Component);\n\nexport default withRouter(Submit);","map":{"version":3,"sources":["c:\\Users\\judam\\Documents\\HJ\\dev\\truffle_react\\client\\src\\component\\Submit.js"],"names":["React","Component","withRouter","Redirect","USERS","insertTransaction","Submit","state","contract","props","info","bankAccount","accounts","userAddress","amount","charge","date","componentWillMount","purpose","match","params","parseInt","localStorage","getItem","setState","_submit","receiverName","receiverAddress","userName","get","isNaN","console","log","deposit","from","withdraw","remit","_getDate","getBalance","balance","transaction","_makeTransaction","words","setItem","history","push","DATE","Date","year","getFullYear","month","getMonth","slice","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","_checkPurpose","logout","inThousandsAmount","toString","replace","marginTop"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,kBAArC;AAEA,SAASC,KAAT,EAAgBC,iBAAhB,QAAyC,UAAzC;AACA,OAAO,mBAAP;;IAEMC,M;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAG,MAAKC,KAAL,CAAWC,IAAX,CAAgBF,QADrB;AAENG,MAAAA,WAAW,EAAG,MAAKF,KAAL,CAAWC,IAAX,CAAgBE,QAAhB,CAAyB,CAAzB,CAFR;AAGNC,MAAAA,WAAW,EAAG,MAAKJ,KAAL,CAAWC,IAAX,CAAgBG,WAHxB;AAINC,MAAAA,MAAM,EAAG,CAJH;AAKNC,MAAAA,MAAM,EAAG,CALH;AAMNC,MAAAA,IAAI,EAAG;AAND,K;;UASRC,kB,GAAqB,YAAM;AACzB,UAAIH,MAAM,GAAG,CAAb;AADyB,UAEjBI,OAFiB,GAEL,MAAKT,KAAL,CAAWU,KAAX,CAAiBC,MAFZ,CAEjBF,OAFiB;;AAIzB,UAAGA,OAAO,KAAK,SAAf,EAAyB;AACvBJ,QAAAA,MAAM,GAAGO,QAAQ,CAACC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAD,EAAyC,EAAzC,CAAjB;AACD,OAFD,MAEO,IAAGL,OAAO,KAAK,UAAf,EAA2B;AAChCJ,QAAAA,MAAM,GAAGO,QAAQ,CAACC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAD,EAA0C,EAA1C,CAAjB;AACD,OAFM,MAEA,IAAGL,OAAO,KAAK,OAAf,EAAwB;AAC7BJ,QAAAA,MAAM,GAAGO,QAAQ,CAACC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAD,EAAuC,EAAvC,CAAjB;AACD;;AAED,YAAKC,QAAL,CAAc;AAAEV,QAAAA,MAAM,EAANA;AAAF,OAAd;AACD,K;;UAEDW,O;;;;6BAAU;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BACuD,MAAKlB,KAD5D,EACAI,WADA,eACAA,WADA,EACaG,MADb,eACaA,MADb,EACqBN,QADrB,eACqBA,QADrB,EAC+BK,WAD/B,eAC+BA,WAD/B,EAC4CE,MAD5C,eAC4CA,MAD5C;AAEFG,cAAAA,OAFE,GAEU,MAAKT,KAAL,CAAWU,KAAX,CAAiBC,MAF3B,CAEFF,OAFE;AAGFQ,cAAAA,YAHE,GAGaJ,YAAY,CAACC,OAAb,CAAqB,cAArB,CAHb;AAIFI,cAAAA,eAJE,GAIgBL,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAJhB;AAKFK,cAAAA,QALE,GAKSxB,KAAK,CAACyB,GAAN,CAAUhB,WAAV,EAAuBe,QALhC;;AAAA,mBAOLE,KAAK,CAAChB,MAAD,CAPA;AAAA;AAAA;AAAA;;AAOUiB,cAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAPV;AAAA;;AAAA;AAAA,oBAQAlB,MAAM,KAAK,CARX;AAAA;AAAA;AAAA;;AAQciB,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AARd;AAAA;;AAAA;AAAA,oBASAd,OAAO,KAAK,EATZ;AAAA;AAAA;AAAA;;AAAA;AAAA,4BAYGA,OAZH;AAAA,8CAaG,SAbH,wBAiBG,UAjBH,wBAqBG,OArBH;AAAA;;AAAA;AAAA;AAAA,qBAcMV,QAAQ,CAACyB,OAAT,CAAiBnB,MAAjB,EAAyB;AAAEoB,gBAAAA,IAAI,EAAGvB;AAAT,eAAzB,CAdN;;AAAA;AAeAO,cAAAA,OAAO,GAAG,IAAV;AAfA;;AAAA;AAAA;AAAA,qBAkBMV,QAAQ,CAAC2B,QAAT,CAAkBrB,MAAlB,EAA0B;AAAEoB,gBAAAA,IAAI,EAAGvB;AAAT,eAA1B,CAlBN;;AAAA;AAmBAO,cAAAA,OAAO,GAAG,IAAV;AAnBA;;AAAA;AAAA;AAAA,qBAsBMV,QAAQ,CAAC4B,KAAT,CAAetB,MAAf,EAAuBa,eAAvB,EAAwC;AAAEO,gBAAAA,IAAI,EAAGvB;AAAT,eAAxC,CAtBN;;AAAA;AAuBAO,cAAAA,OAAO,GAAG,IAAV;AAvBA;;AAAA;AAAA;;AAAA;AA2BEF,cAAAA,IA3BF,GA2BS,MAAKqB,QAAL,EA3BT,EA6BJ;;AA7BI;AAAA,qBA8BkB7B,QAAQ,CAAC8B,UAAT,CAAoBzB,WAApB,EAAiC;AAAEqB,gBAAAA,IAAI,EAAGvB;AAAT,eAAjC,CA9BlB;;AAAA;AA8BE4B,cAAAA,OA9BF;AAgCEC,cAAAA,WAhCF,GAgCgB,MAAKC,gBAAL,CAAsBvB,OAAtB,EAA+BU,QAA/B,EAAyCZ,IAAzC,EAA+CF,MAA/C,EAAuDC,MAAvD,EAA+DwB,OAAO,CAACG,KAAR,CAAc,CAAd,CAA/D,EAAiFhB,YAAjF,EAA+FC,eAA/F,CAhChB,EAkCJ;;AACAtB,cAAAA,iBAAiB,CAACQ,WAAD,EAAc2B,WAAd,CAAjB;AACA,kBAAGtB,OAAO,KAAK,IAAf,EAAqBb,iBAAiB,CAACsB,eAAD,EAAkBa,WAAlB,CAAjB;AAErBpC,cAAAA,KAAK,CAACyB,GAAN,CAAUhB,WAAV,EAAuB0B,OAAvB,GAAiCA,OAAO,CAACG,KAAR,CAAc,CAAd,CAAjC,CAtCI,CAwCJ;;AACApB,cAAAA,YAAY,CAACqB,OAAb,CAAqB,QAArB,EAA+B7B,MAA/B;AACAQ,cAAAA,YAAY,CAACqB,OAAb,CAAqB,SAArB,EAAgCJ,OAAhC;AACAjB,cAAAA,YAAY,CAACqB,OAAb,CAAqB,MAArB,EAA6B3B,IAA7B;;AAEA,oBAAKP,KAAL,CAAWmC,OAAX,CAAmBC,IAAnB,sBAAsC,MAAKpC,KAAL,CAAWU,KAAX,CAAiBC,MAAjB,CAAwBF,OAA9D;;AA7CI;AAAA;;AAAA;AAAA;AAAA;AA+CJa,cAAAA,OAAO,CAACC,GAAR;;AA/CI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAoDVK,Q,GAAW,YAAM;AACf,UAAMS,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,UAAMC,IAAI,GAAGF,IAAI,CAACG,WAAL,EAAb;AACA,UAAMC,KAAK,GAAG,CAAC,OAAOJ,IAAI,CAACK,QAAL,KAAkB,CAAzB,CAAD,EAA8BC,KAA9B,CAAoC,CAAC,CAArC,CAAd;AACA,UAAMC,GAAG,GAAG,CAAC,MAAMP,IAAI,CAACQ,OAAL,EAAP,EAAuBF,KAAvB,CAA6B,CAAC,CAA9B,CAAZ;AACA,UAAMG,KAAK,GAAG,CAAC,MAAMT,IAAI,CAACU,QAAL,EAAP,EAAwBJ,KAAxB,CAA8B,CAAC,CAA/B,CAAd;AACA,UAAMK,OAAO,GAAG,CAAC,MAAMX,IAAI,CAACY,UAAL,EAAP,EAA0BN,KAA1B,CAAgC,CAAC,CAAjC,CAAhB;AACA,UAAMO,OAAO,GAAG,CAAC,MAAMb,IAAI,CAACc,UAAL,EAAP,EAA0BR,KAA1B,CAAgC,CAAC,CAAjC,CAAhB;AACA,UAAMpC,IAAI,aAAMgC,IAAN,cAAcE,KAAd,cAAuBG,GAAvB,cAA8BE,KAA9B,cAAuCE,OAAvC,cAAkDE,OAAlD,CAAV;;AAEA,YAAKnC,QAAL,CAAc;AAAER,QAAAA,IAAI,EAAJA;AAAF,OAAd;;AAEA,aAAOA,IAAP;AACD,K;;UAEDyB,gB,GAAmB,UAACvB,OAAD,EAAUU,QAAV,EAAoBZ,IAApB,EAA0BF,MAA1B,EAAkCC,MAAlC,EAA0CwB,OAA1C,EAAmDb,YAAnD,EAAiEC,eAAjE,EAAqF;AACtG,UAAMa,WAAW,GAAG;AAClBtB,QAAAA,OAAO,EAAGA,OADQ;AAElBU,QAAAA,QAAQ,EAAGA,QAFO;AAGlBZ,QAAAA,IAAI,EAAGA,IAHW;AAIlBF,QAAAA,MAAM,EAAGA,MAJS;AAKlBC,QAAAA,MAAM,EAAGA,MALS;AAMlBwB,QAAAA,OAAO,EAAGA,OANQ;AAOlBb,QAAAA,YAAY,EAAGA,YAPG;AAQlBC,QAAAA,eAAe,EAAGA;AARA,OAApB;AAWA,aAAOa,WAAP;AACD,K;;UAEDqB,a,GAAgB,YAAM;AACpB,UAAMnC,YAAY,GAAGJ,YAAY,CAACC,OAAb,CAAqB,cAArB,CAArB;AADoB,UAEZL,OAFY,GAEA,MAAKT,KAAL,CAAWU,KAAX,CAAiBC,MAFjB,CAEZF,OAFY;;AAIpB,cAAQA,OAAR;AACE,aAAK,SAAL;AAAgB,iBAAO,gBAAP;;AAChB,aAAK,UAAL;AAAkB,iBAAO,gBAAP;;AAClB,aAAK,OAAL;AAAe,2BAAUQ,YAAV;;AACf;AAAU;AAJZ;AAMD,K;;;;;;;6BAEO;AAAA,UACEoC,MADF,GACa,KAAKrD,KADlB,CACEqD,MADF;AAAA,UAEED,aAFF,GAE6B,IAF7B,CAEEA,aAFF;AAAA,UAEiBpC,OAFjB,GAE6B,IAF7B,CAEiBA,OAFjB;AAGN,UAAMsC,iBAAiB,GAAG,KAAKxD,KAAL,CAAWO,MAAX,CAAkBkD,QAAlB,GAA6BC,OAA7B,CAAqC,uBAArC,EAA8D,GAA9D,CAA1B;;AAEA,UAAG3C,YAAY,CAACC,OAAb,CAAqB,SAArB,MAAoC,MAAvC,EAA+C;AAC7CQ,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,eAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,aACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4B6B,aAAa,EAAzC,CADF,EAGE;AAAK,QAAA,KAAK,EAAE;AAAEK,UAAAA,SAAS,EAAC;AAAZ,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAASH,iBAAT,CADF,CADF,EAKE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,4BAAf;AAA4C,QAAA,OAAO,EAAEtC,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,CADF,EAIE;AAAK,QAAA,SAAS,EAAC,2BAAf;AAA2C,QAAA,OAAO,EAAEqC,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,CAJF,CALF,CAHF,CADF;AAoBD;;;;EArJkB7D,S;;AAwJrB,eAAeC,UAAU,CAACI,MAAD,CAAzB","sourcesContent":["import React, { Component } from 'react'\r\nimport { withRouter, Redirect } from 'react-router-dom'\r\n\r\nimport { USERS, insertTransaction } from '../DB/DB'\r\nimport '../css/Submit.css'\r\n\r\nclass Submit extends Component {\r\n  state = {\r\n    contract : this.props.info.contract,\r\n    bankAccount : this.props.info.accounts[0],\r\n    userAddress : this.props.info.userAddress,\r\n    amount : 0,\r\n    charge : 0,\r\n    date : ''\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    let amount = 0\r\n    const { purpose } = this.props.match.params\r\n\r\n    if(purpose === 'deposit'){\r\n      amount = parseInt(localStorage.getItem('deposit_amount'), 10)\r\n    } else if(purpose === 'withdraw') {\r\n      amount = parseInt(localStorage.getItem('withdraw_amount'), 10)\r\n    } else if(purpose === 'remit') {\r\n      amount = parseInt(localStorage.getItem('remit_amount'), 10)\r\n    }\r\n\r\n    this.setState({ amount })\r\n  }\r\n\r\n  _submit = async () => {\r\n    const { bankAccount, amount, contract, userAddress, charge } = this.state\r\n    let { purpose } = this.props.match.params\r\n    const receiverName = localStorage.getItem('receiverName')\r\n    const receiverAddress = localStorage.getItem('receiverAddress')\r\n    const userName = USERS.get(userAddress).userName\r\n    \r\n    if(isNaN(amount)) console.log(\"숫자만 입력할 수 있습니다.\") \r\n    else if(amount === 0) console.log('금액을 입력하세요')\r\n    else if(purpose !== ''){\r\n      try{\r\n        //Call deposit or withdraw from constant according to the purpose\r\n        switch(purpose) {\r\n          case 'deposit' : \r\n            await contract.deposit(amount, { from : bankAccount }) \r\n            purpose = '입금'\r\n            break\r\n          case 'withdraw' : \r\n            await contract.withdraw(amount, { from : bankAccount }) \r\n            purpose = '출금'\r\n            break\r\n          case 'remit' : \r\n            await contract.remit(amount, receiverAddress, { from : bankAccount }) \r\n            purpose = '송금'\r\n            break\r\n          default : break\r\n        }\r\n        const date = this._getDate()\r\n\r\n        //Set balance in state\r\n        const balance = await contract.getBalance(userAddress, { from : bankAccount })\r\n\r\n        const transaction = this._makeTransaction(purpose, userName, date, amount, charge, balance.words[0], receiverName, receiverAddress)\r\n\r\n        //Insert the transaction in DB\r\n        insertTransaction(userAddress, transaction)\r\n        if(purpose === '송금') insertTransaction(receiverAddress, transaction)\r\n\r\n        USERS.get(userAddress).balance = balance.words[0]\r\n\r\n        //Set amount, balance, date in localStorage\r\n        localStorage.setItem('amount', amount)\r\n        localStorage.setItem('balance', balance)\r\n        localStorage.setItem('date', date)\r\n\r\n        this.props.history.push(`/statement/${this.props.match.params.purpose}`)\r\n      } catch(error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n  }\r\n\r\n  _getDate = () => {\r\n    const DATE = new Date()\r\n    const year = DATE.getFullYear()\r\n    const month = (\"0\" + (DATE.getMonth() + 1)).slice(-2)\r\n    const day = (\"0\" + DATE.getDate()).slice(-2)\r\n    const hours = (\"0\" + DATE.getHours()).slice(-2)\r\n    const minutes = (\"0\" + DATE.getMinutes()).slice(-2)\r\n    const seconds = (\"0\" + DATE.getSeconds()).slice(-2)\r\n    const date = `${year}.${month}.${day} ${hours}:${minutes}:${seconds}`\r\n\r\n    this.setState({ date })\r\n\r\n    return date\r\n  }\r\n\r\n  _makeTransaction = (purpose, userName, date, amount, charge, balance, receiverName, receiverAddress) => {\r\n    const transaction = {\r\n      purpose : purpose,\r\n      userName : userName,\r\n      date : date,\r\n      amount : amount,\r\n      charge : charge,\r\n      balance : balance,\r\n      receiverName : receiverName,\r\n      receiverAddress : receiverAddress\r\n    }\r\n\r\n    return transaction\r\n  }\r\n\r\n  _checkPurpose = () => {\r\n    const receiverName = localStorage.getItem('receiverName')\r\n    const { purpose } = this.props.match.params\r\n\r\n    switch (purpose) {\r\n      case 'deposit': return \"입금할 금액이 맞습니까 ?\"\r\n      case 'withdraw' : return \"출금할 금액이 맞습니까 ?\"\r\n      case 'remit' : return `${receiverName}님께 송금할 금액이 맞습니까 ?`\r\n      default : break\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const { logout } = this.props\r\n    const { _checkPurpose, _submit } = this\r\n    const inThousandsAmount = this.state.amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n\r\n    if(localStorage.getItem('isLogin') !== 'true') {\r\n      console.log('고객 정보가 없습니다.')\r\n      return <Redirect to='/' />\r\n    }\r\n\r\n    return(\r\n      <div className=\"submit\">\r\n        <p className='checkAmount'>{_checkPurpose()}</p>\r\n\r\n        <div style={{ marginTop:\"30px\" }}>\r\n          <div className=\"amount\">\r\n            <span>￦ {inThousandsAmount}</span>\r\n          </div>\r\n\r\n          <div className=\"submitDiv\">\r\n            <div className=\"submitButton confirmButton\" onClick={_submit}>\r\n              <span>확 인</span>\r\n            </div>\r\n            <div className=\"submitButton cancelButton\" onClick={logout}>\r\n              <span>취 소</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(Submit)"]},"metadata":{},"sourceType":"module"}