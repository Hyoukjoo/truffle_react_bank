{"ast":null,"code":"var _regeneratorRuntime = require(\"C:\\\\Users\\\\judam\\\\Documents\\\\HJ\\\\dev\\\\truffle_react\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\judam\\\\Documents\\\\HJ\\\\dev\\\\truffle_react\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar StatusError = require(\"./statuserror\");\n\nvar Utils = require(\"./utils\");\n\nvar Reason = require(\"./reason\");\n/*\n  Handlers for events emitted by `send` / `call` etc.\n */\n\n\nvar handlers = {\n  // ----------------------------------- Constants -------------------------------------------------\n  maxConfirmations: 24,\n  // Maximum number of confirmation web3 emits\n  defaultTimeoutBlocks: 50,\n  // Maximum number of blocks web3 will wait before abandoning tx\n  timeoutMessage: '50 blocks',\n  // Substring of web3 timeout error.\n  // -----------------------------------  Helpers --------------------------------------------------\n\n  /**\n   * Parses error message and determines if we should squash block timeout errors at user's request.\n   * @param  {Object} context execution state\n   * @param  {Object} error   error\n   * @return {Boolean}\n   */\n  ignoreTimeoutError: function ignoreTimeoutError(context, error) {\n    var timedOut = error.message && error.message.includes(handlers.timeoutMessage);\n    var shouldWait = context.contract && context.contract.timeoutBlocks && context.contract.timeoutBlocks > handlers.defaultTimeoutBlocks;\n    return timedOut && shouldWait;\n  },\n\n  /**\n   * Attaches Truffle specific handlers to all of the events emitted by a web3 method.\n   * @param {Object}       context  execution state\n   * @param {PromiEvent}   emitter  promiEvent returned by a web3 method call\n   */\n  setup: function setup(emitter, context) {\n    emitter.on('error', handlers.error.bind(emitter, context));\n    emitter.on('transactionHash', handlers.hash.bind(emitter, context));\n    emitter.on('confirmation', handlers.confirmation.bind(emitter, context));\n    emitter.on('receipt', handlers.receipt.bind(emitter, context));\n  },\n  // -----------------------------------  Handlers -------------------------------------------------\n\n  /**\n   * Error event handler. Emits error unless error is block timeout and user has\n   * specified we should wait longer\n   * @param  {Object} context   execution state\n   * @param  {Object} error     error\n   */\n  error: function error(context, _error) {\n    if (!handlers.ignoreTimeoutError(context, _error)) {\n      context.promiEvent.eventEmitter.emit('error', _error);\n      this.removeListener('error', handlers.error);\n    }\n  },\n\n  /**\n   * Transaction hash event handler. Attaches the hash to the context object\n   * so it can be attached to the contract instance after a deployment resolves.\n   * @param  {Object} context   execution state\n   * @param  {String} hash      transaction hash\n   */\n  hash: function hash(context, _hash) {\n    context.transactionHash = _hash;\n    context.promiEvent.eventEmitter.emit('transactionHash', _hash);\n    this.removeListener('transactionHash', handlers.hash);\n  },\n  confirmation: function confirmation(context, number, receipt) {\n    context.promiEvent.eventEmitter.emit('confirmation', number, receipt); // Per web3: initial confirmation index is 0\n\n    if (number === handlers.maxConfirmations + 1) {\n      this.removeListener('confirmation', handlers.confirmation);\n    }\n  },\n\n  /**\n   * Receipt event handler. This handler decodes the event logs, re-emits the receipt,\n   * and (for method calls only) resolves/rejects the promiEvent with the receipt.\n   * @param  {Object} context   execution state\n   * @param  {Object} receipt   transaction receipt\n   */\n  receipt: function () {\n    var _receipt2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(context, _receipt) {\n      var logs, reason, error;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Decode logs\n              _receipt.logs ? logs = Utils.decodeLogs.call(context.contract, _receipt.logs) : logs = []; // Emit receipt\n\n              context.promiEvent.eventEmitter.emit('receipt', _receipt); // .new(): Exit early. We need the promiEvent to resolve a contract instance.\n\n              if (!context.onlyEmitReceipt) {\n                _context.next = 5;\n                break;\n              }\n\n              context.receipt = _receipt;\n              return _context.abrupt(\"return\");\n\n            case 5:\n              if (!(_receipt.status !== undefined && !_receipt.status)) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 8;\n              return Reason.get(context.params, context.contract.web3);\n\n            case 8:\n              reason = _context.sent;\n              error = new StatusError(context.params, _receipt.transactionHash, _receipt, reason);\n              return _context.abrupt(\"return\", context.promiEvent.reject(error));\n\n            case 11:\n              // This object has some duplicate data but is backward compatible.\n              context.promiEvent.resolve({\n                tx: _receipt.transactionHash,\n                receipt: _receipt,\n                logs: logs\n              });\n              this.removeListener('receipt', handlers.receipt);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function receipt(_x, _x2) {\n      return _receipt2.apply(this, arguments);\n    };\n  }()\n};\nmodule.exports = handlers;","map":null,"metadata":{},"sourceType":"script"}