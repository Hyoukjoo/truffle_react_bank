{"ast":null,"code":"'use strict';\n\nvar ruleModules = require('./_rules'),\n    toHash = require('./util').toHash;\n\nmodule.exports = function rules() {\n  var RULES = [{\n    type: 'number',\n    rules: [{\n      'maximum': ['exclusiveMaximum']\n    }, {\n      'minimum': ['exclusiveMinimum']\n    }, 'multipleOf', 'format']\n  }, {\n    type: 'string',\n    rules: ['maxLength', 'minLength', 'pattern', 'format']\n  }, {\n    type: 'array',\n    rules: ['maxItems', 'minItems', 'uniqueItems', 'contains', 'items']\n  }, {\n    type: 'object',\n    rules: ['maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames', {\n      'properties': ['additionalProperties', 'patternProperties']\n    }]\n  }, {\n    rules: ['$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf']\n  }];\n  var ALL = ['type'];\n  var KEYWORDS = ['additionalItems', '$schema', '$id', 'id', 'title', 'description', 'default', 'definitions'];\n  var TYPES = ['number', 'integer', 'string', 'array', 'object', 'boolean', 'null'];\n  RULES.all = toHash(ALL);\n  RULES.types = toHash(TYPES);\n  RULES.forEach(function (group) {\n    group.rules = group.rules.map(function (keyword) {\n      var implKeywords;\n\n      if (typeof keyword == 'object') {\n        var key = Object.keys(keyword)[0];\n        implKeywords = keyword[key];\n        keyword = key;\n        implKeywords.forEach(function (k) {\n          ALL.push(k);\n          RULES.all[k] = true;\n        });\n      }\n\n      ALL.push(keyword);\n      var rule = RULES.all[keyword] = {\n        keyword: keyword,\n        code: ruleModules[keyword],\n        implements: implKeywords\n      };\n      return rule;\n    });\n    if (group.type) RULES.types[group.type] = group;\n  });\n  RULES.keywords = toHash(ALL.concat(KEYWORDS));\n  RULES.custom = {};\n  return RULES;\n};","map":null,"metadata":{},"sourceType":"script"}