{"ast":null,"code":"var TruffleError = require(\"truffle-error\");\n\nvar inherits = require(\"util\").inherits;\n\nvar web3 = require(\"web3\");\n\ninherits(StatusError, TruffleError);\nvar defaultGas = 90000;\n\nfunction StatusError(args, tx, receipt, reason) {\n  var message;\n  var gasLimit = parseInt(args.gas) || defaultGas;\n  var reasonString = '';\n  if (reason) reasonString = \"Reason given: \".concat(reason, \".\");\n\n  if (receipt.gasUsed === gasLimit) {\n    message = \"Transaction: \" + tx + \" exited with an error (status 0) after consuming all gas.\\n\" + \"     Please check that the transaction:\\n\" + \"     - satisfies all conditions set by Solidity `assert` statements.\\n\" + \"     - has enough gas to execute the full transaction.\\n\" + \"     - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).\";\n  } else {\n    message = \"Transaction: \".concat(tx, \" exited with an error (status 0). \").concat(reasonString, \"\\n\") + \"     Please check that the transaction:\\n\" + \"     - satisfies all conditions set by Solidity `require` statements.\\n\" + \"     - does not trigger a Solidity `revert` statement.\\n\";\n  }\n\n  StatusError.super_.call(this, message);\n  this.tx = tx;\n  this.receipt = receipt;\n  this.reason = reason;\n}\n\nmodule.exports = StatusError;","map":null,"metadata":{},"sourceType":"script"}