{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { assign, createFragmentMap, getDefaultValues, getFragmentDefinitions, getOperationDefinition, isField, isIdValue, isInlineFragment, isProduction, resultKeyNameFromField, shouldInclude, storeKeyNameFromField, toIdValue, isEqual } from 'apollo-utilities';\nimport { ObjectCache } from './objectCache';\nimport { defaultNormalizedCacheFactory } from './depTrackingCache';\n\nvar WriteError = function (_super) {\n  tslib_1.__extends(WriteError, _super);\n\n  function WriteError() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'WriteError';\n    return _this;\n  }\n\n  return WriteError;\n}(Error);\n\nexport { WriteError };\nexport function enhanceErrorWithDocument(error, document) {\n  var enhancedError = new WriteError(\"Error writing result to store for query:\\n \" + JSON.stringify(document));\n  enhancedError.message += '\\n' + error.message;\n  enhancedError.stack = error.stack;\n  return enhancedError;\n}\n\nvar StoreWriter = function () {\n  function StoreWriter() {}\n\n  StoreWriter.prototype.writeQueryToStore = function (_a) {\n    var query = _a.query,\n        result = _a.result,\n        _b = _a.store,\n        store = _b === void 0 ? defaultNormalizedCacheFactory() : _b,\n        variables = _a.variables,\n        dataIdFromObject = _a.dataIdFromObject,\n        fragmentMatcherFunction = _a.fragmentMatcherFunction;\n    return this.writeResultToStore({\n      dataId: 'ROOT_QUERY',\n      result: result,\n      document: query,\n      store: store,\n      variables: variables,\n      dataIdFromObject: dataIdFromObject,\n      fragmentMatcherFunction: fragmentMatcherFunction\n    });\n  };\n\n  StoreWriter.prototype.writeResultToStore = function (_a) {\n    var dataId = _a.dataId,\n        result = _a.result,\n        document = _a.document,\n        _b = _a.store,\n        store = _b === void 0 ? defaultNormalizedCacheFactory() : _b,\n        variables = _a.variables,\n        dataIdFromObject = _a.dataIdFromObject,\n        fragmentMatcherFunction = _a.fragmentMatcherFunction;\n    var operationDefinition = getOperationDefinition(document);\n\n    try {\n      return this.writeSelectionSetToStore({\n        result: result,\n        dataId: dataId,\n        selectionSet: operationDefinition.selectionSet,\n        context: {\n          store: store,\n          processedData: {},\n          variables: assign({}, getDefaultValues(operationDefinition), variables),\n          dataIdFromObject: dataIdFromObject,\n          fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n          fragmentMatcherFunction: fragmentMatcherFunction\n        }\n      });\n    } catch (e) {\n      throw enhanceErrorWithDocument(e, document);\n    }\n  };\n\n  StoreWriter.prototype.writeSelectionSetToStore = function (_a) {\n    var _this = this;\n\n    var result = _a.result,\n        dataId = _a.dataId,\n        selectionSet = _a.selectionSet,\n        context = _a.context;\n    var variables = context.variables,\n        store = context.store,\n        fragmentMap = context.fragmentMap;\n    selectionSet.selections.forEach(function (selection) {\n      if (!shouldInclude(selection, variables)) {\n        return;\n      }\n\n      if (isField(selection)) {\n        var resultFieldKey = resultKeyNameFromField(selection);\n        var value = result[resultFieldKey];\n\n        if (typeof value !== 'undefined') {\n          _this.writeFieldToStore({\n            dataId: dataId,\n            value: value,\n            field: selection,\n            context: context\n          });\n        } else {\n          var isDefered = selection.directives && selection.directives.length && selection.directives.some(function (directive) {\n            return directive.name && directive.name.value === 'defer';\n          });\n\n          if (!isDefered && context.fragmentMatcherFunction) {\n            if (!isProduction()) {\n              console.warn(\"Missing field \" + resultFieldKey + \" in \" + JSON.stringify(result, null, 2).substring(0, 100));\n            }\n          }\n        }\n      } else {\n        var fragment = void 0;\n\n        if (isInlineFragment(selection)) {\n          fragment = selection;\n        } else {\n          fragment = (fragmentMap || {})[selection.name.value];\n\n          if (!fragment) {\n            throw new Error(\"No fragment named \" + selection.name.value + \".\");\n          }\n        }\n\n        var matches = true;\n\n        if (context.fragmentMatcherFunction && fragment.typeCondition) {\n          var idValue = toIdValue({\n            id: 'self',\n            typename: undefined\n          });\n          var fakeContext = {\n            store: new ObjectCache({\n              self: result\n            }),\n            cacheRedirects: {}\n          };\n          var match = context.fragmentMatcherFunction(idValue, fragment.typeCondition.name.value, fakeContext);\n\n          if (!isProduction() && match === 'heuristic') {\n            console.error('WARNING: heuristic fragment matching going on!');\n          }\n\n          matches = !!match;\n        }\n\n        if (matches) {\n          _this.writeSelectionSetToStore({\n            result: result,\n            selectionSet: fragment.selectionSet,\n            dataId: dataId,\n            context: context\n          });\n        }\n      }\n    });\n    return store;\n  };\n\n  StoreWriter.prototype.writeFieldToStore = function (_a) {\n    var field = _a.field,\n        value = _a.value,\n        dataId = _a.dataId,\n        context = _a.context;\n\n    var _b;\n\n    var variables = context.variables,\n        dataIdFromObject = context.dataIdFromObject,\n        store = context.store;\n    var storeValue;\n    var storeObject;\n    var storeFieldName = storeKeyNameFromField(field, variables);\n\n    if (!field.selectionSet || value === null) {\n      storeValue = value != null && typeof value === 'object' ? {\n        type: 'json',\n        json: value\n      } : value;\n    } else if (Array.isArray(value)) {\n      var generatedId = dataId + \".\" + storeFieldName;\n      storeValue = this.processArrayValue(value, generatedId, field.selectionSet, context);\n    } else {\n      var valueDataId = dataId + \".\" + storeFieldName;\n      var generated = true;\n\n      if (!isGeneratedId(valueDataId)) {\n        valueDataId = '$' + valueDataId;\n      }\n\n      if (dataIdFromObject) {\n        var semanticId = dataIdFromObject(value);\n\n        if (semanticId && isGeneratedId(semanticId)) {\n          throw new Error('IDs returned by dataIdFromObject cannot begin with the \"$\" character.');\n        }\n\n        if (semanticId || typeof semanticId === 'number' && semanticId === 0) {\n          valueDataId = semanticId;\n          generated = false;\n        }\n      }\n\n      if (!isDataProcessed(valueDataId, field, context.processedData)) {\n        this.writeSelectionSetToStore({\n          dataId: valueDataId,\n          result: value,\n          selectionSet: field.selectionSet,\n          context: context\n        });\n      }\n\n      var typename = value.__typename;\n      storeValue = toIdValue({\n        id: valueDataId,\n        typename: typename\n      }, generated);\n      storeObject = store.get(dataId);\n      var escapedId = storeObject && storeObject[storeFieldName];\n\n      if (escapedId !== storeValue && isIdValue(escapedId)) {\n        var hadTypename = escapedId.typename !== undefined;\n        var hasTypename = typename !== undefined;\n        var typenameChanged = hadTypename && hasTypename && escapedId.typename !== typename;\n\n        if (generated && !escapedId.generated && !typenameChanged) {\n          throw new Error(\"Store error: the application attempted to write an object with no provided id\" + (\" but the store already contains an id of \" + escapedId.id + \" for this object. The selectionSet\") + \" that was trying to be written is:\\n\" + JSON.stringify(field));\n        }\n\n        if (hadTypename && !hasTypename) {\n          throw new Error(\"Store error: the application attempted to write an object with no provided typename\" + (\" but the store already contains an object with typename of \" + escapedId.typename + \" for the object of id \" + escapedId.id + \". The selectionSet\") + \" that was trying to be written is:\\n\" + JSON.stringify(field));\n        }\n\n        if (escapedId.generated) {\n          if (typenameChanged) {\n            if (!generated) {\n              store.delete(escapedId.id);\n            }\n          } else {\n            mergeWithGenerated(escapedId.id, storeValue.id, store);\n          }\n        }\n      }\n    }\n\n    storeObject = store.get(dataId);\n\n    if (!storeObject || !isEqual(storeValue, storeObject[storeFieldName])) {\n      store.set(dataId, tslib_1.__assign({}, storeObject, (_b = {}, _b[storeFieldName] = storeValue, _b)));\n    }\n  };\n\n  StoreWriter.prototype.processArrayValue = function (value, generatedId, selectionSet, context) {\n    var _this = this;\n\n    return value.map(function (item, index) {\n      if (item === null) {\n        return null;\n      }\n\n      var itemDataId = generatedId + \".\" + index;\n\n      if (Array.isArray(item)) {\n        return _this.processArrayValue(item, itemDataId, selectionSet, context);\n      }\n\n      var generated = true;\n\n      if (context.dataIdFromObject) {\n        var semanticId = context.dataIdFromObject(item);\n\n        if (semanticId) {\n          itemDataId = semanticId;\n          generated = false;\n        }\n      }\n\n      if (!isDataProcessed(itemDataId, selectionSet, context.processedData)) {\n        _this.writeSelectionSetToStore({\n          dataId: itemDataId,\n          result: item,\n          selectionSet: selectionSet,\n          context: context\n        });\n      }\n\n      return toIdValue({\n        id: itemDataId,\n        typename: item.__typename\n      }, generated);\n    });\n  };\n\n  return StoreWriter;\n}();\n\nexport { StoreWriter };\n\nfunction isGeneratedId(id) {\n  return id[0] === '$';\n}\n\nfunction mergeWithGenerated(generatedKey, realKey, cache) {\n  if (generatedKey === realKey) {\n    return false;\n  }\n\n  var generated = cache.get(generatedKey);\n  var real = cache.get(realKey);\n  var madeChanges = false;\n  Object.keys(generated).forEach(function (key) {\n    var value = generated[key];\n    var realValue = real[key];\n\n    if (isIdValue(value) && isGeneratedId(value.id) && isIdValue(realValue) && !isEqual(value, realValue) && mergeWithGenerated(value.id, realValue.id, cache)) {\n      madeChanges = true;\n    }\n  });\n  cache.delete(generatedKey);\n\n  var newRealValue = tslib_1.__assign({}, generated, real);\n\n  if (isEqual(newRealValue, real)) {\n    return madeChanges;\n  }\n\n  cache.set(realKey, newRealValue);\n  return true;\n}\n\nfunction isDataProcessed(dataId, field, processedData) {\n  if (!processedData) {\n    return false;\n  }\n\n  if (processedData[dataId]) {\n    if (processedData[dataId].indexOf(field) >= 0) {\n      return true;\n    } else {\n      processedData[dataId].push(field);\n    }\n  } else {\n    processedData[dataId] = [field];\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}